@page "/"
@using Club_Portal.Models

@inject LoginService loginService
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage storage


@layout NewLayout
    <form>
        <section class="vh-100">
            <div class="container py-5 h-100">
                <div class="row d-flex justify-content-center align-items-center h-100">
                    <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                        <div class="card bg-dark text-white" style="border-radius: 1rem;">
                            <div class="card-body p-5 text-center">

                                <div class="mb-md-5 mt-md-4 pb-5">

                                    <h2 class="fw-bold mb-2 text-uppercase">Club System Login</h2>
                                    <p class="text-white-50 mb-5">Please enter your login and password!</p>
                                      <div class="form-outline form-white mb-4" style="display:none;">
                                          <label class="form-label" for="clubid">Club Name</label>
                                        <select  id="clubid" class="form-control form-control-lg" @bind="user.ClubID" name="ClubID"  required >
                                            <option value="" selected disabled="disabled">--Select Club Name--</option>
    @if(Clubs == null)  
{  
<p>  
    <em>Loading ...</em>  
</p>  
}  else{
                                        @foreach(var clubs in  Clubs)
                                        {
                                              <option value="@clubs.ClubName" >@clubs.ClubName</option>
                                        }
}
                                    </select>
                                      
                                    </div>
                                    <div class="form-outline form-white mb-4">
                                          <label class="form-label" for="typeEmailX">Username</label>
                                        <input type="text" id="username" class="form-control form-control-lg" @bind="user.UserName" name="username" placeholder="username" required />
                                      
                                    </div>

                                    <div class="form-outline form-white mb-4">
                                         <label class="form-label" for="typePasswordX">Password</label>
                                        <input @bind="user.Password" type="password" id="password" class="form-control form-control-lg" name="password" placeholder="password" required />
                                       
                                    </div>


                                    <p class="small mb-5 pb-lg-2"><a class="text-white-50" href="#!">Forgot password?</a></p>
                                  
                                    <button id="LoginBtn" class="btn btn-outline-light btn-lg px-5" type="button" @onclick="() =>LoginUser(user)" >Login</button>

                                    <div class="d-flex justify-content-center text-center mt-4 pt-1">
                                        <a href="#!" class="text-white"><i class="fab fa-facebook-f fa-lg"></i></a>
                                        <a href="#!" class="text-white"><i class="fab fa-twitter fa-lg mx-4 px-2"></i></a>
                                        <a href="#!" class="text-white"><i class="fab fa-google fa-lg"></i></a>
                                    </div>
                                     <div style="margin:1.5em 1.5em">
                                    <p class="mb-0">Don't have an account? <a href="register" class="text-white-50 fw-bold">Sign Up</a></p>
                                </div>
                                </div>

                               

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </form>
@code {
    [Inject] IJSRuntime JSRuntime { get; set; }
    IEnumerable<ClubInformation> Clubs { get; set; }
    UserInformation userResult  = new UserInformation();
    UserInformation user = new UserInformation();
    public async void LoginUser(UserInformation loginuser)
    {
        if(loginuser.UserName.Length >0 && loginuser.Password.Length >0  ){
            userResult = loginService.ValidateUser(loginuser).FirstOrDefault();
            // await JSRuntime.InvokeVoidAsync("AlertUsernamePassword");
            // base.OnAfterRender(firstRender);
            if(userResult!=null){
                // Session["UserName"] = userResult.UserID;
                if (!userResult.IsActive)
                {
                    await JSRuntime.InvokeVoidAsync("alert"," User has been deactivated");
                    return;
                }
                 if (userResult.IsActive && !userResult.IsClubAdmin ==true )
                {
                    await JSRuntime.InvokeVoidAsync("alert","You are not an Administrator");
                    return;
                }
                else
                {
                   await  storage.SetAsync("UserID", userResult.UserID);
                   await  storage.SetAsync("ClubID", userResult.ClubID);
                    await  storage.SetAsync("UserName", userResult.UserName);
                   
                NavigationManager.NavigateTo("/Index");
                }
              
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert","Wrong Username or Password"); 
            }
        }
    }
    protected async override Task OnInitializedAsync()
    {
      
       Clubs  =    await Task.Run(() => loginService.GetAllClubs());
    }

    
    }
